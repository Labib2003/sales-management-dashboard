generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// START: coaching center project
enum cc_Roles {
  admin
  student
}

model cc_sessions {
  id        String   @id(map: "cc_session_pkey")
  userId    String
  expiresAt DateTime
  cc_users  cc_users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model cc_users {
  id          String        @id(map: "cc_user_pkey")
  name        String
  email       String        @unique
  password    String
  phone       String
  verified    Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime
  role        cc_Roles      @default(student)
  cc_sessions cc_sessions[]
}

// END: coaching center project

// START: sales management dashboard project
enum smd_Role {
  guest
  salesman
  manager
  admin
  superadmin
  demo

  @@map("smd_roles")
}

model smd_Session {
  id String @id @default(uuid())

  userId    String
  expiresAt DateTime
  smd_User  smd_User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("smd_sessions")
}

model smd_User {
  id String @id @default(uuid())

  name            String
  email           String   @unique()
  password        String
  phone           String?
  address         String?
  role            smd_Role
  profile_picture String?
  active          Boolean  @default(true)

  sessions smd_Session[]
  sales    smd_Invoice[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email], map: "email_idx")
  @@map("smd_users")
}

model smd_Vendor {
  id String @id @default(uuid())

  name     String
  address  String
  email    String
  active   Boolean       @default(true)
  products smd_Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("smd_vendors")
}

model smd_Product {
  id String @id @default(uuid())

  name        String
  description String
  package     String
  unit        String?
  vendor_id   String
  active      Boolean @default(true)

  vendor smd_Vendor         @relation(fields: [vendor_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prices smd_ProductPrice[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("smd_products")
}

model smd_ProductPrice {
  id String @id @default(uuid())

  package_price Int
  unit_price    Int?
  product_id    String

  product         smd_Product       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice_history smd_InvoiceItem[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("smd_product_prices")
}

model smd_InvoiceItem {
  id String @id @default(uuid())

  product_price_id String
  invoice_id       String
  package_quantity Int    @default(0)
  unit_quantity    Int    @default(0)

  product_price smd_ProductPrice @relation(fields: [product_price_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoice       smd_Invoice      @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("smd_invoice_items")
}

model smd_Invoice {
  id String @id @default(uuid())

  customer_name    String
  customer_contact String
  customer_address String?
  items            smd_InvoiceItem[]
  created_by_id    String
  active           Boolean           @default(true)

  created_by smd_User @relation(fields: [created_by_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("smd_invoices")
}

// END: sales management dashboard project
